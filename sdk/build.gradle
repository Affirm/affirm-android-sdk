apply plugin: 'com.android.library'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

def packageName = 'com.affirm'
def libraryVersion = '0.3.0'

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.2"

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 25
    versionCode 1
    versionName libraryVersion

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath = true
      }
    }
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'InvalidPackage', 'SetJavaScriptEnabled'
  }
}

pmd {
  toolVersion = '5.5.2'
}

findbugs {
  toolVersion = "3.0.1"
}

checkstyle {
  toolVersion = '7.3'
}

task findbugs(type: FindBugs) {
  excludeFilter file('config/findbugs/exclude.xml')
  classes = files("$project.buildDir/intermediates/classes")
  source = fileTree('src/main/java')
  classpath = files()
  effort = 'max'
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task pmd(type: Pmd) {
  ruleSets = ["java-android",
              "java-basic",
              "java-braces",
              "java-strings",
              "java-unnecessary",
              "java-unusedcode",
              "java-sunsecure"]
  source = fileTree('src/main/java')
}

task checkstyle(type: Checkstyle) {
  configFile file('config/checkstyle/checkstyle.xml')
  source 'src/main/java'
  include '**/*.java'
  classpath = files()
}

task findbugsWrapper(dependsOn: 'findbugs') {}
task pmdWrapper(dependsOn: 'pmd') {}
task checkstyleWrapper(dependsOn: 'checkstyle') {}

check.dependsOn findbugsWrapper
check.dependsOn pmdWrapper
check.dependsOn checkstyleWrapper

dependencies {

  compile "com.android.support:appcompat-v7:$ANDROID_SUPPORT_VERSION"

  provided "com.squareup.okhttp3:okhttp:$OK_HTTP_VERSION"
  provided "com.google.code.gson:gson:$GSON_VERSION"

  annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$AUTOVALUE_VERSION"
  compileOnly "com.ryanharter.auto.value:auto-value-gson:$AUTOVALUE_VERSION"
  annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:0.2.5"

  testCompile 'com.google.truth:truth:0.28'
  testCompile 'junit:junit:4.12'
  testCompile 'org.robolectric:robolectric:3.3.2'
  testCompile 'org.mockito:mockito-core:2.8.9'
  testCompile "com.squareup.okhttp3:okhttp:$OK_HTTP_VERSION"
  testCompile "com.google.code.gson:gson:$GSON_VERSION"
  testCompile "com.squareup.okhttp3:mockwebserver:$OK_HTTP_VERSION"
}

publishing {
  repositories {
    maven {
      name "releases"
      url "$projectDir/../../affirm-maven/releases"
    }

    maven {
      name "snapshots"
      url "$projectDir/../../affirm-maven/snapshots"
    }
  }

  publications {
    maven(MavenPublication) {
      groupId packageName
      version = libraryVersion
      artifactId 'affirm-android-sdk'

      artifact "$buildDir/outputs/aar/${project.getName()}-release.aar"

      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        // Iterate over the 'compile' dependencies
        configurations.provided.allDependencies.each {
          def dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', it.group)
          dependencyNode.appendNode('artifactId', it.name)
          dependencyNode.appendNode('version', it.version)
        }
      }
    }
  }
}